[{"url": "http://www.journaldev.com/1607/difference-between-abstract-class-and-interface-in-java", "passage_text": "1 Abstract classes can extend other class and implement interfaces but interface can only extend other interfaces. 2  We can run an abstract class if it has main() method but we can\u2019t run an interface because they can\u2019t have main method implementation."}, {"url": "http://www.differencebetween.com/difference-between-abstract-class-and-vs-interface/", "passage_text": "Any interface that implements a particular interface should implement all methods defined in the interface, or should be declared as an abstract class. In Java, the type of an object reference can be defined as an interface type."}, {"url": "http://www.differencebetween.com/difference-between-abstract-class-and-vs-interface/", "passage_text": "Abstract class and Interface are two object oriented constructs found in many object oriented programming languages like Java. Abstract class can be considered as an abstract version of a regular (concrete) class, while an interface can be considered as a means of implementing a contract."}, {"url": "https://msdn.microsoft.com/en-us/library/ms173156.aspx", "passage_text": "In that way, an interface in C# is similar to an abstract class in which all the methods are abstract. However, a class or struct can implement multiple interfaces, but a class can inherit only a single class, abstract or not. Therefore, by using interfaces, you can include behavior from multiple sources in a class."}, {"url": "http://www.infoworld.com/article/2928719/c-sharp/my-two-cents-on-abstract-class-vs-interface.html", "passage_text": "Abstract classes are either partially implemented or not implemented at all. You can have functionality in your abstract class -- the methods in an abstract class can be both abstract and concrete. An abstract class can have constructors -- this is one major difference between an abstract class and an interface."}, {"url": "http://www.differencebetween.com/difference-between-abstract-class-and-vs-interface/", "passage_text": "An interface is an abstract type that is used to specify a contract that should be implemented by classes, which implement that interface. The interface keyword is used to define an interface and Implements keyword is used for implementing an interface by a class (in Java programming language)."}, {"url": "http://mindprod.com/jgloss/interfacevsabstract.html", "passage_text": "A class may extend only one abstract class. default implementation. An interface cannot provide any code at all, much less default code. An abstract class can provide complete code, default code and/or just stubs that have to be overridden. constants. Static final constants only, can use them without qualification in classes that implement the interface."}, {"url": "http://www.journaldev.com/1607/difference-between-abstract-class-and-interface-in-java", "passage_text": "1 Abstract classes can have methods with implementation whereas interface provides absolute abstraction and can\u2019t have any method implementations. 2  Abstract classes can have constructors but interfaces can\u2019t have constructors. 3  Abstract class have all the features of a normal java class except that we can\u2019t instantiate it."}, {"url": "http://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class", "passage_text": "@Jiazzyuser If an abstract class implements an interface, it does not have to actually define the interface's methods. That requirement can be deferred to inheriting/child concrete classes. However, a concrete class must implement all interface methods that are not implemented by its parent class."}]