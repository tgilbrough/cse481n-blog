[{"url": "http://www.thenewamerican.com/culture/education/item/16192-common-core-a-scheme-to-rewrite-education", "passage_text": "The controversial \u201cstandards\u201d scheme, known informally as \u201cCommon Core,\u201d is being foisted on state governments all across the country with a combination of taxpayer-funded bribes, outright deception, and federal bludgeoning. "}, {"url": "https://en.wikipedia.org/wiki/Common_Lisp", "passage_text": "Common Lisp (CL) is a dialect of the Lisp programming language, published in ANSI standard document ANSI INCITS 226-1994 (R2004) (formerly X3.226-1994 (R1999)). From the ANSI Common Lisp standard the Common Lisp HyperSpec, a hyperlinked HTML version, has been derived. The namespace for function names is separate from the namespace for data variables. This is a key difference between Common Lisp and Scheme. For Common Lisp, operators that define names in the function namespace include defun, flet, labels, defmethod and defgeneric."}, {"url": "http://c2.com/cgi/wiki?LispSchemeDifferences", "passage_text": "Unfortunately Scheme and Common Lisp are like two siblings who are both very similar and very different. Thus they (or their proponents) fight a lot. The main difference is in the way the two language's standards work--Common Lisp's standard is big and standardizes a lot of things. The Scheme expression ((f)) is in Common Lisp either (funcall (f)) - if f is a function-or (funcall (funcall f)) - if f is a variable with a function as a value. In above example f is a variable. Scheme took all defun out of Lisp! \u2014 Fare. Far\u00e9'here s my take on this Whole-scheme-Vs-Common lisp. issue"}, {"url": "https://en.wikipedia.org/wiki/Scheme_%28programming_language%29", "passage_text": "Scheme is primarily a functional programming language. It shares many characteristics with other members of the Lisp programming language family. Scheme's very simple syntax is based on s-expressions, parenthesized lists in which a prefix operator is followed by its arguments. As in other Lisps, the term  thunk  is used in Scheme to refer to a procedure with no arguments. The term proper tail recursion refers to the property of all Scheme implementations, that they perform tail-call optimization so as to support an indefinite number of active tail calls."}, {"url": "http://www.stewart.com/en/stg/massachusetts/memo-common-scheme.html", "passage_text": "Common Scheme. Restrictions and Reverters. The existence of a common scheme does not impose restrictions on other lots, but rather identifies those parcels that are entitled to enforce the restrictions. Where, for example, restrictions are imposed on one lot they are not thereby implied as being imposed upon another lot. To the contrary, if there is a common scheme, then the second lot may be able to enforce the restrictions upon the first. In this regard, the provisions of G.L.c. 184, \u00a7\u00a726, 27 essentially codify what was said in Snow v. Van Dam, 291 Mass. 477, 197 N.E. 224:"}, {"url": "http://ask-a-lawyer.freeadvice.com/law-questions/what-does-theft-of-identi-9183.htm", "passage_text": "A felony is a crime that is punishable by one year or more in prison; common scheme means plan related to the crime. M.T.G., Member, New York Bar / FreeAdvice Contributing Attorney Answered 6 years ago| Contributor. I am not admitted in Montana but found the following: 45-6-332. Felony is a serious offense rather than a misdemeanor which is not as serious. You brother needs an attorney in your area familiar with these type of cases. Good luck."}, {"url": "https://www.cebglobal.com/blogs/five-common-b2c-segmentation-schemes/", "passage_text": "1 Life Stage: This scheme addresses common needs of customers in similar life stages or facing similar life events. 2  For example, some companies offer high-touch service to youth customers to strengthen relationships with these groups and maximize their future value to the company. Five Common B2C Segmentation Schemes. Note: this is the first post in a three-part blog series on business-to-consumer segmentation."}, {"url": "http://c2.com/cgi/wiki?LispSchemeDifferences", "passage_text": "Scheme is a dialect of Lisp that stresses conceptual elegance and simplicity. It is specified in R4RS and IEEE standard P1178. (See the Scheme FAQ for details on standards for Scheme.) Scheme is much smaller than Common Lisp; the specification is about 50 pages, compared to Common Lisp's 1300 page draft standard. The Scheme expression ((f)) is in Common Lisp either (funcall (f)) - if f is a function-or (funcall (funcall f)) - if f is a variable with a function as a value. In above example f is a variable. Scheme took all defun out of Lisp! \u2014 Fare. Far\u00e9'here s my take on this Whole-scheme-Vs-Common lisp. issue"}, {"url": "https://en.wikipedia.org/wiki/Scheme_%28programming_language%29", "passage_text": "Prior to R5RS, Scheme had no standard equivalent of the eval procedure which is ubiquitous in other Lisps, although the first Lambda Paper had described evaluate as similar to the LISP function EVAL and the first Revised Report in 1978 replaced this with enclose, which took two arguments. As in other Lisps, the term  thunk  is used in Scheme to refer to a procedure with no arguments. The term proper tail recursion refers to the property of all Scheme implementations, that they perform tail-call optimization so as to support an indefinite number of active tail calls."}]